package com.mslibs.api;

import java.net.ConnectException;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;

import com.loopj.android.http.AsyncHttpResponseHandler;
import com.mslibs.utils.VolleyLog;

public abstract class BaseApi {

	public static final String EXCEPTION_UNKNOWNHOST = "unknownhost";
	public static final String EXCEPTION_CONNECT = "connect";
	public static final String EXCEPTION_SOCKET = "socket";
	public static final String EXCEPTION_SOCKET_TIMEOUT = "socket_timeout";

	protected CallBack mCallBack = null;
	protected Object extra = null;

	public BaseApi(CallBack callback) {
		this.mCallBack = callback;
	}

	public void setExtra(Object extra) {
		this.extra = extra;
	}

	protected AsyncHttpResponseHandler handler = new AsyncHttpResponseHandler() {
		@Override
		public void onSuccess(String response) {
			VolleyLog.v(decodeUnicode(response));
			if (mCallBack == null) {
				return;
			}
			if (extra != null) {
				mCallBack.setExtra(extra);
			}

			mCallBack.onSuccess(response);
		}

		@Override
		public void onFailure(Throwable e) {
			VolleyLog.e(e, e.toString());

			if (e instanceof UnknownHostException) {
				VolleyLog.e(e, EXCEPTION_UNKNOWNHOST);
			} else if (e instanceof ConnectException) {
				VolleyLog.e(e, EXCEPTION_CONNECT);
			} else if (e instanceof SocketException) {
				VolleyLog.e(e, EXCEPTION_SOCKET);
			} else if (e instanceof SocketTimeoutException) {
				VolleyLog.e(e, EXCEPTION_SOCKET_TIMEOUT);
			}

			if (mCallBack == null) {
				return;
			}

			mCallBack.onFailure(e.toString());
		}
	};

	/**
	 * 把unicode模式的字符串,转成正常的字符串
	 */
	public static String decodeUnicode(String theString) {
		if (null == theString) {
			return "null";
		}

		char aChar;
		int len = theString.length();
		StringBuffer outBuffer = new StringBuffer(len);
		for (int x = 0; x < len;) {
			aChar = theString.charAt(x++);
			if (aChar == '\\') {
				aChar = theString.charAt(x++);
				if (aChar == 'u') {
					// Read the xxxx
					int value = 0;
					for (int i = 0; i < 4; i++) {
						aChar = theString.charAt(x++);
						switch (aChar) {
						case '0':
						case '1':
						case '2':
						case '3':
						case '4':
						case '5':
						case '6':
						case '7':
						case '8':
						case '9':
							value = (value << 4) + aChar - '0';
							break;
						case 'a':
						case 'b':
						case 'c':
						case 'd':
						case 'e':
						case 'f':
							value = (value << 4) + 10 + aChar - 'a';
							break;
						case 'A':
						case 'B':
						case 'C':
						case 'D':
						case 'E':
						case 'F':
							value = (value << 4) + 10 + aChar - 'A';
							break;
						default:
							throw new IllegalArgumentException("Malformed   \\uxxxx   encoding.");
						}
					}
					outBuffer.append((char) value);
				} else {
					if (aChar == 't')
						aChar = '\t';
					else if (aChar == 'r')
						aChar = '\r';
					else if (aChar == 'n')
						aChar = '\n';
					else if (aChar == 'f')
						aChar = '\f';
					outBuffer.append(aChar);
				}

			} else
				outBuffer.append(aChar);
		}
		return outBuffer.toString();
	}
}
