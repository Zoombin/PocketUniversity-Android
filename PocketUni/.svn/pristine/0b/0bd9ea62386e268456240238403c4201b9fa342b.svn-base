package com.xyhui.activity.more;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.regex.MatchResult;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import net.sourceforge.zbar.Config;
import net.sourceforge.zbar.Image;
import net.sourceforge.zbar.ImageScanner;
import net.sourceforge.zbar.Symbol;
import net.sourceforge.zbar.SymbolSet;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.hardware.Camera;
import android.hardware.Camera.AutoFocusCallback;
import android.hardware.Camera.PreviewCallback;
import android.hardware.Camera.Size;
import android.os.Handler;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.mslibs.utils.VolleyLog;
import com.xyhui.R;
import com.xyhui.activity.event.EventViewActivity;
import com.xyhui.types.QrCode;
import com.xyhui.utils.CameraPreview;
import com.xyhui.utils.Params;
import com.xyhui.widget.FLActivity;

public class QRCodeScanActivity extends FLActivity {
	private final int FOCUS_INTERVAL = 2000;

	private Button btn_back;
	private Button btn_setting;
	private TextView text_tips;
	private FrameLayout layout_camera_preview;

	private Camera mCamera;
	private CameraPreview mPreview;
	private Handler mAutoFocusHandler;
	private ImageScanner mScanner;
	private boolean mBarcodeScanned;
	private boolean mPreviewing = true;// 防止对焦回调在离开当前activity后执行，引起空指针
	private String mEventCode;

	static {
		System.loadLibrary("iconv");
	}

	@Override
	public void linkUiVar() {
		setContentView(R.layout.activity_qrcode_scan);

		btn_back = (Button) findViewById(R.id.btn_back);
		btn_setting = (Button) findViewById(R.id.btn_setting);
		text_tips = (TextView) findViewById(R.id.text_tips);
		layout_camera_preview = (FrameLayout) findViewById(R.id.layout_camera_preview);
	}

	@Override
	public void bindListener() {
		btn_back.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// 关闭返回
				releaseCamera();
				finish();
			}
		});

		btn_setting.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				LinearLayout linearLayout = new LinearLayout(QRCodeScanActivity.this);
				// 设置活动码
				final EditText input_code = new EditText(QRCodeScanActivity.this);
				LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(
						LinearLayout.LayoutParams.MATCH_PARENT,
						LinearLayout.LayoutParams.WRAP_CONTENT);
				input_code.setLayoutParams(lp);
				lp.setMargins(60, 30, 60, 30);

				linearLayout.setLayoutParams(lp);
				linearLayout.addView(input_code);
				input_code.setSingleLine(true);
				input_code.setTextSize(18);
				input_code.setHint("输入活动码");

				new AlertDialog.Builder(QRCodeScanActivity.this).setTitle("设置活动码")
						.setView(linearLayout)
						.setPositiveButton("确认", new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int whichButton) {
								mEventCode = input_code.getText().toString().trim();

								if (TextUtils.isEmpty(mEventCode)) {
									text_tips.setText("请将手机摄像头对准二维码进行扫描");
								} else {
									text_tips.setText("己设置活动管理码\n请将手机摄像头对准二维码进行扫描");
								}
							}
						}).setNegativeButton("取消", new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int whichButton) {

							}
						}).show();
			}
		});

	}

	@Override
	public void ensureUi() {
		mAutoFocusHandler = new Handler();

		/* Instance barcode scanner */
		mScanner = new ImageScanner();
		mScanner.setConfig(0, Config.X_DENSITY, 3);
		mScanner.setConfig(0, Config.Y_DENSITY, 3);
	}

	@Override
	protected void onResume() {
		super.onResume();

		mPreviewing = true;

		mCamera = getCameraInstance();
		mPreview = new CameraPreview(this, mCamera, previewCb, mAutoFocusCB);
		layout_camera_preview.addView(mPreview);

		mBarcodeScanned = false;
	}

	public void onPause() {
		super.onPause();
		releaseCamera();
		layout_camera_preview.removeAllViews();
	}

	/** A safe way to get an instance of the Camera object. */
	public static Camera getCameraInstance() {
		Camera c = null;
		try {
			c = Camera.open();
		} catch (Exception e) {
		}
		return c;
	}

	private void releaseCamera() {
		if (mCamera != null) {
			mPreviewing = false;
			mCamera.setPreviewCallback(null);
			mCamera.release();
			mCamera = null;
		}
	}

	private Runnable mAutoFocus = new Runnable() {
		public void run() {
			if (mPreviewing) {
				mCamera.autoFocus(mAutoFocusCB);
			}
		}
	};

	PreviewCallback previewCb = new PreviewCallback() {
		public void onPreviewFrame(byte[] data, Camera camera) {
			Camera.Parameters parameters = camera.getParameters();
			Size size = parameters.getPreviewSize();

			Image barcode = new Image(size.width, size.height, "Y800");
			barcode.setData(data);

			int result = mScanner.scanImage(barcode);

			if (result != 0) {
				SymbolSet syms = mScanner.getResults();

				String code = null;

				for (Symbol sym : syms) {
					VolleyLog.d("barcode result: %s", sym.getData());
					code = sym.getData();

					mBarcodeScanned = true;
				}

				if (mBarcodeScanned && !TextUtils.isEmpty(code)) {
					releaseCamera();
					QrCode qrcode = new QrCode();

					Pattern p = Pattern.compile("xyhui://([a-z]+)/([0-9a-zA-Z]+)/?([^/]*)");
					Matcher m = p.matcher(code);
					if (m.find()) {
						MatchResult mr = m.toMatchResult();

						String type = mr.group(1);
						String id = mr.group(2);
						String title = mr.group(3);
						VolleyLog.d("group 1:%s 2:%s 3:%s", type, id, title);

						try {
							if (!TextUtils.isEmpty(title)) {
								title = URLDecoder.decode(title, "utf-8");
							}
						} catch (UnsupportedEncodingException e) {

						}

						qrcode.id = id;
						qrcode.title = title;

						if ("user".equalsIgnoreCase(type)) {
							if (TextUtils.isEmpty(mEventCode)) {
								qrcode.type = QrCode.ADDFRIEND;
							} else {
								qrcode.type = QrCode.ADMINEVENTCHECKIN;
								qrcode.code = mEventCode;
							}
						} else if ("event".equalsIgnoreCase(type)) {
							qrcode.type = QrCode.EVENTCHECKIN;
						} else {
							qrcode.type = QrCode.OTHER;
						}
					} else {
						Pattern event = Pattern.compile("http://pocketuni.net/eventf/([0-9]+)");
						Matcher eventMatch = event.matcher(code);
						if (eventMatch.find()) {
							MatchResult eventResult = eventMatch.toMatchResult();
							String eventId = eventResult.group(1);

							if (!TextUtils.isEmpty(eventId)) {
								Intent intent = new Intent(mActivity, EventViewActivity.class);
								intent.putExtra(Params.INTENT_EXTRA.EVENTID, eventId);
								mActivity.startActivity(intent);
								return;
							}
						}
					}

					Intent intent = new Intent(mActivity, QRCodeResultActivity.class);
					intent.putExtra(Params.INTENT_EXTRA.QRCODE, qrcode);
					mActivity.startActivity(intent);
				}
			}
		}
	};

	// Mimic continuous auto-focusing
	AutoFocusCallback mAutoFocusCB = new AutoFocusCallback() {
		public void onAutoFocus(boolean success, Camera camera) {
			mAutoFocusHandler.postDelayed(mAutoFocus, FOCUS_INTERVAL);
		}
	};
}
