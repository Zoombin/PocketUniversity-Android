package com.xyhui.activity;

import java.io.File;

import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Application;
import android.app.DownloadManager;
import android.app.DownloadManager.Query;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.text.TextUtils;
import android.widget.Toast;

import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.MKGeneralListener;
import com.baidu.mapapi.map.MKEvent;
import com.loopj.android.http.RequestParams;
import com.mslibs.utils.VolleyLog;
import com.xyhui.types.MobileApp;
import com.xyhui.utils.LocalDataManager;
import com.xyhui.utils.Params;
import com.xyhui.utils.PrefUtil;

public class PuApp extends Application {
	private static PuApp mInstance;

	private PrefUtil mPrefUtil;

	private LocalDataManager mLocalDataMgr;

	public static final String BAIDU_MAP_KEY = "E219E7F630C5AFB461EA51235757BA528B0F00D8";

	private BroadcastReceiver OnDownloadDonereceiver;

	private BMapManager mBMapManager = null;

	@Override
	public void onCreate() {
		super.onCreate();
		VolleyLog.d("MainApplication onCreate");

		mInstance = this;

		mPrefUtil = new PrefUtil();

		mLocalDataMgr = new LocalDataManager();

		loadDownloadReceiver();

		initMapManager();
	}

	public LocalDataManager getLocalDataMgr() {
		return mLocalDataMgr;
	}

	public BMapManager getBMapMgr() {
		return mBMapManager;
	}

	public void initMapManager() {
		if (null == mBMapManager) {
			mBMapManager = new BMapManager(this);
			mBMapManager.init(PuApp.BAIDU_MAP_KEY, new MyGeneralListener());
		}
	}

	// 常用事件监听，用来处理通常的网络错误，授权验证错误等
	static class MyGeneralListener implements MKGeneralListener {

		@Override
		public void onGetNetworkState(int iError) {
			if (iError == MKEvent.ERROR_NETWORK_CONNECT) {
				Toast.makeText(mInstance.getApplicationContext(), "您的网络出错啦！", Toast.LENGTH_LONG)
						.show();
			} else if (iError == MKEvent.ERROR_NETWORK_DATA) {
				Toast.makeText(mInstance.getApplicationContext(), "输入正确的检索条件！", Toast.LENGTH_LONG)
						.show();
			}
		}

		@Override
		public void onGetPermissionState(int iError) {
			if (iError == MKEvent.ERROR_PERMISSION_DENIED) {

			}
		}
	}

	public static PuApp get() {
		return mInstance;
	}

	@TargetApi(Build.VERSION_CODES.GINGERBREAD)
	private void loadDownloadReceiver() {
		if (Build.VERSION.SDK_INT > Build.VERSION_CODES.FROYO) {
			OnDownloadDonereceiver = new BroadcastReceiver() {
				@Override
				public void onReceive(Context context, Intent intent) {
					String action = intent.getAction();
					if (action.equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE)) {

						VolleyLog.d("ACTION_DOWNLOAD_COMPLETE");
						Long dwnId = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, 0);
						VolleyLog.d("got download id: %d", dwnId);
						DownloadManager manager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);

						Query query = new Query();
						query.setFilterById(dwnId);
						Cursor cur = manager.query(query);

						if (cur.moveToFirst()) {
							int columnIndex = cur.getColumnIndex(DownloadManager.COLUMN_STATUS);
							int status = cur.getInt(columnIndex);

							VolleyLog.d("got cur.getInt(%d): %d", columnIndex, status);
							if (DownloadManager.STATUS_SUCCESSFUL == status) {
								String localUriString = cur.getString(cur
										.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI));

								File mFile = new File(Uri.parse(localUriString).getPath());

								if (!mFile.exists()) {
									return;
								}

								String filename = mFile.getName().toString();

								VolleyLog.d("got file: %s", mFile.getAbsolutePath());

								if (filename.endsWith(".apk")) {
									installPackage(mFile);
								}
							}
						}
					}
				}
			};

			registerReceiver(OnDownloadDonereceiver, new IntentFilter(
					DownloadManager.ACTION_DOWNLOAD_COMPLETE));
		}
	}

	public void cleanOnTerminate() {
		if (OnDownloadDonereceiver != null) {
			unregisterReceiver(OnDownloadDonereceiver);
		}

		if (null != mBMapManager) {
			mBMapManager.destroy();
			mBMapManager = null;
		}
	}

	public Boolean installPackage(File mFile) {
		Uri uri = Uri.fromFile(mFile);

		Intent intent = new Intent(Intent.ACTION_VIEW);
		intent.setDataAndType(uri, "application/vnd.android.package-archive");
		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		startActivity(intent);

		return true;
	}

	public boolean isInstalled(MobileApp app) {
		PackageInfo packageInfo;
		try {
			packageInfo = getPackageManager().getPackageInfo(app.pkgName, 0);
		} catch (NameNotFoundException e) {
			VolleyLog.e(e, "");
			packageInfo = null;
		}
		if (packageInfo == null) {
			return false;
		}
		return true;
	}

	public RequestParams getToken() {
		RequestParams params = new RequestParams();
		String oauth_token = mPrefUtil.getPreference(Params.LOCAL.TOKEN);
		String oauth_token_secret = mPrefUtil.getPreference(Params.LOCAL.SECRET);
		if (!TextUtils.isEmpty(oauth_token) && !TextUtils.isEmpty(oauth_token_secret)) {
			params.put("oauth_token", oauth_token);
			params.put("oauth_token_secret", oauth_token_secret);
		}
		return params;
	}

	public boolean isLogon() {
		return !TextUtils.isEmpty(mPrefUtil.getPreference(Params.LOCAL.UID));
	}

	public void logout(Context context) {
		mPrefUtil.setPreference(Params.LOCAL.UID, null);
		mPrefUtil.setPreference(Params.LOCAL.MOBILE, null);
		mPrefUtil.setPreference(Params.LOCAL.ANNOUNCETIME, 0);

		// 进入登陆界面
		Intent intent = new Intent();
		intent.setClass(context, SigninActivity.class);
		context.startActivity(intent);
		((Activity) context).finish();
	}
}
