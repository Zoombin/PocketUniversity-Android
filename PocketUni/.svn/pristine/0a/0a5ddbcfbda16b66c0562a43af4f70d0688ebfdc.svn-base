package com.xyhui.activity;

import java.io.File;
import java.util.ArrayList;

import android.annotation.TargetApi;
import android.app.Application;
import android.app.DownloadManager;
import android.app.DownloadManager.Query;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.net.Uri;
import android.os.Build;
import android.preference.PreferenceManager;
import android.text.TextUtils;
import android.widget.Toast;

import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.MKGeneralListener;
import com.baidu.mapapi.map.MKEvent;
import com.google.gson.reflect.TypeToken;
import com.loopj.android.http.RequestParams;
import com.mslibs.utils.JSONUtils;
import com.mslibs.utils.VolleyLog;
import com.xyhui.api.Api;
import com.xyhui.api.CallBack;
import com.xyhui.types.City;
import com.xyhui.types.CourseCat;
import com.xyhui.types.EventCat;
import com.xyhui.types.GroupCats;
import com.xyhui.types.KeyValuePair;
import com.xyhui.types.MobileApp;
import com.xyhui.types.School;
import com.xyhui.types.UserData;
import com.xyhui.utils.Preferences;

public class PuApp extends Application {
	private static PuApp mInstance;
	private ArrayList<School> schools;
	private ArrayList<City> citys;
	private ArrayList<EventCat> eventCats;
	private ArrayList<CourseCat> courseCats;
	private GroupCats groupCats;

	private String isVerified;
	private String isInited;

	public static final String BAIDU_MAP_KEY = "E219E7F630C5AFB461EA51235757BA528B0F00D8";

	private SharedPreferences mPrefs;

	private BroadcastReceiver OnDownloadDonereceiver;

	public BMapManager mBMapManager = null;

	@Override
	public void onCreate() {
		super.onCreate();
		VolleyLog.d("MainApplication onCreate");

		mPrefs = PreferenceManager.getDefaultSharedPreferences(this);

		loadDownloadReceiver();
		mInstance = this;

		initMapManager();
	}

	public void initMapManager() {
		if (null == mBMapManager) {
			mBMapManager = new BMapManager(this);
			mBMapManager.init(PuApp.BAIDU_MAP_KEY, new MyGeneralListener());
		}
	}

	// 常用事件监听，用来处理通常的网络错误，授权验证错误等
	static class MyGeneralListener implements MKGeneralListener {

		@Override
		public void onGetNetworkState(int iError) {
			if (iError == MKEvent.ERROR_NETWORK_CONNECT) {
				Toast.makeText(mInstance.getApplicationContext(), "您的网络出错啦！", Toast.LENGTH_LONG)
						.show();
			} else if (iError == MKEvent.ERROR_NETWORK_DATA) {
				Toast.makeText(mInstance.getApplicationContext(), "输入正确的检索条件！", Toast.LENGTH_LONG)
						.show();
			}
		}

		@Override
		public void onGetPermissionState(int iError) {
			if (iError == MKEvent.ERROR_PERMISSION_DENIED) {

			}
		}
	}

	public void setSchools(ArrayList<School> schools) {
		this.schools = schools;
	}

	public ArrayList<School> getSchools() {
		if (null != schools)
			return new ArrayList<School>(schools);
		else
			return null;
	}

	public void setCitys(ArrayList<City> citys) {
		this.citys = citys;
	}

	public ArrayList<City> getCitys() {
		if (null != citys) {
			return new ArrayList<City>(citys);
		} else {
			return null;
		}
	}

	public boolean citySchoolArrived() {
		if (null != schools && null != citys) {
			return true;
		}
		return false;
	}

	public boolean catDataArrived() {
		if (null != eventCats && null != courseCats && groupCatsArrived()) {
			return true;
		}
		return false;
	}

	public boolean userDataArrived() {
		if (null != isVerified && null != isInited) {
			return true;
		}
		return false;
	}

	public boolean allDataArrived() {
		if (citySchoolArrived() && catDataArrived() && userDataArrived()) {
			return true;
		}
		return false;
	}

	public void setUserData(Context context) {
		if (!userDataArrived()) {
			new Api(checkUserCB, context).checkUser(getToken());
		}
	}

	public void setEventCats(Context context) {
		if (null == eventCats || eventCats.size() == 1) {
			new Api(eventCatListCB, context).getEventCats(getToken());
		}
	}

	public ArrayList<EventCat> getEventCats() {
		return eventCats;
	}

	public void setCourseCats(Context context) {
		if (null == courseCats || courseCats.size() == 1) {
			new Api(courseCatListCB, context).getCourseCats(getToken());
		}
	}

	public ArrayList<CourseCat> getCourseCats() {
		return courseCats;
	}

	public boolean groupCatsArrived() {
		return (null != groupCats && null != groupCats.dpart && null != groupCats.school
				&& null != groupCats.year && null != groupCats.category);
	}

	public void setGroupCats(Context context) {
		if (!groupCatsArrived()) {
			new Api(groupCatListCB, context).groupCategory(getToken());
		}
	}

	public GroupCats getGroupCats() {
		return groupCats;
	}

	public boolean isVerified() {
		return "1".equals(isVerified);
	}

	public boolean isInited() {
		return "1".equals(isInited);
	}

	public void clearAllData() {
		citys = null;
		schools = null;
		courseCats = null;
		eventCats = null;
		groupCats = null;
		isVerified = null;
		isInited = null;
	}

	CallBack checkUserCB = new CallBack() {

		@Override
		public void onSuccess(String response) {
			UserData data = JSONUtils.fromJson(response, UserData.class);

			isVerified = data.is_valid;
			isInited = data.is_init;
		}
	};

	CallBack groupCatListCB = new CallBack() {
		@Override
		public void onSuccess(String response) {

			groupCats = JSONUtils.fromJson(response, GroupCats.class);

			KeyValuePair kv = new KeyValuePair("0", "选择部落");
			groupCats.dpart.add(0, kv);
			kv = new KeyValuePair("0", "选择院系");
			groupCats.school.add(0, kv);
			groupCats.year.add(0, "选择年级");
			kv = new KeyValuePair("0", "选择分类");
			groupCats.category.add(0, kv);
		}
	};

	CallBack courseCatListCB = new CallBack() {
		@Override
		public void onSuccess(String response) {

			courseCats = JSONUtils.fromJson(response, new TypeToken<ArrayList<CourseCat>>() {
			});

			CourseCat sort = new CourseCat();
			sort.name = "选择分类";
			sort.id = "0";
			courseCats.add(0, sort);
		}
	};

	CallBack eventCatListCB = new CallBack() {
		@Override
		public void onSuccess(String response) {
			eventCats = JSONUtils.fromJson(response, new TypeToken<ArrayList<EventCat>>() {
			});

			EventCat sort = new EventCat();
			sort.title = "选择分类";
			sort.id = "0";
			eventCats.add(0, sort);
		}
	};

	public static PuApp get() {
		return mInstance;
	}

	@TargetApi(Build.VERSION_CODES.GINGERBREAD)
	private void loadDownloadReceiver() {
		if (Build.VERSION.SDK_INT > Build.VERSION_CODES.FROYO) {
			OnDownloadDonereceiver = new BroadcastReceiver() {
				@Override
				public void onReceive(Context context, Intent intent) {
					String action = intent.getAction();
					if (action.equals(DownloadManager.ACTION_DOWNLOAD_COMPLETE)) {

						VolleyLog.d("ACTION_DOWNLOAD_COMPLETE");
						Long dwnId = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, 0);
						VolleyLog.d("got download id: %d", dwnId);
						DownloadManager manager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);

						Query query = new Query();
						query.setFilterById(dwnId);
						Cursor cur = manager.query(query);

						if (cur.moveToFirst()) {
							int columnIndex = cur.getColumnIndex(DownloadManager.COLUMN_STATUS);
							int status = cur.getInt(columnIndex);

							VolleyLog.d("got cur.getInt(%d): %d", columnIndex, status);
							if (DownloadManager.STATUS_SUCCESSFUL == status) {
								String localUriString = cur.getString(cur
										.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI));

								File mFile = new File(Uri.parse(localUriString).getPath());

								if (!mFile.exists()) {
									return;
								}

								String filename = mFile.getName().toString();

								VolleyLog.d("got file: %s", mFile.getAbsolutePath());

								if (filename.endsWith(".apk")) {
									installPackage(mFile);
								}
							}
						}
					}
				}
			};

			registerReceiver(OnDownloadDonereceiver, new IntentFilter(
					DownloadManager.ACTION_DOWNLOAD_COMPLETE));
		}
	}

	public void cleanOnTerminate() {
		if (OnDownloadDonereceiver != null) {
			unregisterReceiver(OnDownloadDonereceiver);
		}

		if (null != mBMapManager) {
			mBMapManager.destroy();
			mBMapManager = null;
		}
	}

	public Boolean installPackage(File mFile) {
		Uri uri = Uri.fromFile(mFile);

		Intent intent = new Intent(Intent.ACTION_VIEW);
		intent.setDataAndType(uri, "application/vnd.android.package-archive");
		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		startActivity(intent);

		return true;
	}

	public void setPreference(String PrefId, String value) {
		if (TextUtils.isEmpty(value)) {
			mPrefs.edit().remove(PrefId).commit();
		} else {
			mPrefs.edit().putString(PrefId, value).commit();
		}
	}

	public void setPreference(String PrefId, long value) {
		if (value == 0) {
			mPrefs.edit().remove(PrefId).commit();
		} else {
			mPrefs.edit().putLong(PrefId, value).commit();
		}
	}

	public void setPreference(String PrefId, int value) {
		if (value == 0) {
			mPrefs.edit().remove(PrefId).commit();
		} else {
			mPrefs.edit().putInt(PrefId, value).commit();
		}
	}

	public void setPreference(String PrefId, boolean value) {
		mPrefs.edit().putBoolean(PrefId, value).commit();
	}

	public String getPreference(String PrefId) {
		String value = mPrefs.getString(PrefId, null);
		if (TextUtils.isEmpty(value)) {
			return null;
		}
		return value;
	}

	public int getIntPreference(String PrefId) {
		return getIntPreference(PrefId, 0);
	}

	public int getIntPreference(String PrefId, int defaultvalue) {

		int value = mPrefs.getInt(PrefId, 0);
		return value;
	}

	public long getLongPreference(String PrefId) {

		long value = mPrefs.getLong(PrefId, 0);
		return value;
	}

	public boolean getBoolPreference(String PrefId) {
		boolean value = mPrefs.getBoolean(PrefId, true);
		return value;
	}

	public boolean isLogon() {
		return !TextUtils.isEmpty(getPreference(Preferences.LOCAL.UID));
	}

	public RequestParams getToken() {
		RequestParams params = new RequestParams();
		String oauth_token = getPreference(Preferences.LOCAL.TOKEN);
		String oauth_token_secret = getPreference(Preferences.LOCAL.SECRET);
		if (!TextUtils.isEmpty(oauth_token) && !TextUtils.isEmpty(oauth_token_secret)) {
			params.put("oauth_token", oauth_token);
			params.put("oauth_token_secret", oauth_token_secret);
		}
		return params;
	}

	public boolean isInstalled(MobileApp app) {
		PackageInfo packageInfo;
		try {
			packageInfo = getPackageManager().getPackageInfo(app.pkgName, 0);
		} catch (NameNotFoundException e) {
			VolleyLog.e(e, "");
			packageInfo = null;
		}
		if (packageInfo == null) {
			return false;
		}
		return true;
	}
}
